package com.example.school.service;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;

/*
 * A anotaÃ§Ã£o @ApplicationScoped Ã© usada para especificar que a classe
 * serÃ¡ um bean CDI. Isto significa que, a classe serÃ¡ gerenciada pelo 
 * container CDI. O container CDI irÃ¡ instanciar a classe e irÃ¡ injetar
 * a instÃ¢ncia onde quer que seja necessÃ¡rio.
 * O container CDI Ã© uma parte do Jakarta EE que fornece injeÃ§Ã£o de dependÃªncia
 * e um ciclo de vida de componentes.
 */
@ApplicationScoped
public class MatriculaService {

    /*
     * A anotaÃ§Ã£o @Inject Ã© usada para injetar uma dependÃªncia.
     * Neste caso, estamos injetando uma dependÃªncia do tipo EntityManager. Mas o que Ã© EntityManager?
     * EntityManager Ã© uma interface que Ã© usada para interagir com o banco de dados. COMO?
     * EntityManager Ã© uma interface que fornece mÃ©todos para fazer operaÃ§Ãµes de persistÃªncia
     * de dados. Isto significa que, podemos usar o EntityManager para fazer operaÃ§Ãµes de persistÃªncia. Mas como ele se conecta ao banco de dados?
     * 
     * EntityManager Ã© uma interface que Ã© implementada por um provedor de persistÃªncia. O provedor de persistÃªncia Ã© uma implementaÃ§Ã£o
     * da especificaÃ§Ã£o JPA. Isto significa em simples palavras que o provedor de persistÃªncia Ã© uma implementaÃ§Ã£o da especificaÃ§Ã£o JPA.
     */
    @Inject
    EntityManager entityManager;

    /*
     * A anotaÃ§Ã£o @Transactional Ã© usada para especificar que o mÃ©todo serÃ¡ executado dentro de uma transaÃ§Ã£o.
     * Isto significa que, se o mÃ©todo lanÃ§ar uma exceÃ§Ã£o, a transaÃ§Ã£o serÃ¡ revertida. Se o mÃ©todo for executado com sucesso, a transaÃ§Ã£o serÃ¡ commitada.
     * Isto significa que, se o mÃ©todo for executado com sucesso, as alteraÃ§Ãµes feitas no banco de dados serÃ£o persistidas. Se o mÃ©todo lanÃ§ar uma exceÃ§Ã£o, as alteraÃ§Ãµes feitas no banco de dados serÃ£o revertidas.
     * Isto significa que, se o mÃ©todo lanÃ§ar uma exceÃ§Ã£o, as alteraÃ§Ãµes feitas no banco de dados serÃ£o revertidas.
     * Agora em entityManager usamos o createNativeQuery para criar uma query nativa. Mas o que Ã© uma query nativa?
     * Uma query nativa Ã© uma query SQL que Ã© executada diretamente no banco de dados. 
     * Isto significa que, a query Ã© executada diretamente no banco de dados. Mas como?
     * Passamos um INSERT INTO aluno_materia (aluno_id, materia_id), isto significa que estamos criando campos de aluno_id e materia_id
     * Passando VALUES, mas porque usamos :aluno e :materia?
     */
    @Transactional
    public void associarAlunoMateria(Long alunoId, Long materiaId) {
        entityManager.createNativeQuery("INSERT INTO aluno_materia (aluno_id, materia_id) VALUES (:aluno, :materia)")
            .setParameter("aluno", alunoId)
            .setParameter("materia", materiaId)
            .executeUpdate();
    }

    /**
     * Remove a associaÃ§Ã£o entre um aluno e uma matÃ©ria
     */


     /*
      * O uso de : significa que estamos passando um parÃ¢metro para a query.
      * Isto significa que, estamos passando um parÃ¢metro chamado aluno e um parÃ¢metro chamado materia.
      * Mas como passamos os valores para os parÃ¢metros aluno e materia? Usamos o mÃ©todo setParameter.
      * O mÃ©todo setParameter Ã© usado para passar valores para os parÃ¢metros da query.
      * Isto significa que, estamos passando o valor de alunoId para o parÃ¢metro aluno e o valor de materiaId para o parÃ¢metro materia.
      * por exemplo, 
      * query.setParameter("aluno", 5); // agora aluno_id = 5 
      * query.setParameter("materia", 10); // materia_id = 10
      */


      /*
       Exemplo PrÃ¡tico: SituaÃ§Ã£o: VocÃª deseja remover a associaÃ§Ã£o do aluno com ID = 3 e matÃ©ria ID = 2.
       entityManager.createNativeQuery("DELETE FROM aluno_materia WHERE aluno_id = :aluno AND materia_id = :materia")
        .setParameter("aluno", alunoId)     // aqui vai o ID do aluno, ex.: 3
        .setParameter("materia", materiaId) // aqui vai o ID da matÃ©ria, ex: 10
        .executeUpdate();

        Se na sua aplicaÃ§Ã£o tem alunoId = 3; materiaId = 10;
        EntÃ£o: DELETE FROM aluno_materia WHERE aluno_id = 3 AND materia_id = 10;

        NÃƒO Ã©: .setParameter(3, alunoId) ou .setParameter(10, materiaId).

        FORMA CORRETA:
        .setParameter("aluno", 3)
        .setParameter("materia", 10)


        Analogia simples para reforÃ§ar:
        "Caro(a) :nome, vocÃª estÃ¡ matriculado(a) na matÃ©ria :materia."

        VocÃª preencheria usando algo assim:
        .setParameter("aluno", "Luiz")
        .setParameter("materia", "InglÃªs")

        VocÃª nÃ£o coloca diretamente o valor no nome do parÃ¢metro. O nome Ã© fixo, o valor Ã© variÃ¡vel.

       */

    @Transactional
    public void desassociarAlunoMateria(Long alunoId, Long materiaId) {
        entityManager.createNativeQuery("DELETE FROM aluno_materia WHERE aluno_id = :aluno AND materia_id = :materia")
            .setParameter("aluno", alunoId)
            .setParameter("materia", materiaId)
            .executeUpdate();
    } 

    /**
     Por que usar COUNT?
     Quando queremos saber se algo existe ou nÃ£o em uma tabela, podemos contar as linhas que satisfazem uma determinada condiÃ§Ã£o:
     Se o nÃºmero de linhas (COUNT) for maior que zero, significa que existe essa associaÃ§Ã£o.
     Se for zero, nÃ£o existe essa associaÃ§Ã£o.

     Mas repare: seu exemplo nÃ£o tem um "COUNT" explÃ­cito, apenas .getSingleResult(). No caso, o Hibernate ORM, ao executar:
     SELECT COUNT(*) FROM aluno_materia WHERE aluno_id = 3 AND materia_id = 10
        Vai retornar um nÃºmero, que Ã© o resultado do COUNT. Se for 0, 
        nÃ£o existe a associaÃ§Ã£o. Se for maior que 0, existe a associaÃ§Ã£o.

    Entendendo essa query em SQL puro:
    SELECT COUNT(*) FROM aluno_materia
    WHERE aluno_id = :aluno AND materia_id = :materia;

    Essa query verifica quantas linhas existem na tabela que correspondem ao aluno e Ã  matÃ©ria especificados.
    COUNT(*) conta o nÃºmero de linhas encontradas.


    Por que count > 0?
    Se o count for maior que zero, significa que jÃ¡ existe um registro associando aquele aluno Ã quela matÃ©ria.
    Caso contrÃ¡rio (zero), significa que nÃ£o hÃ¡ registro e o aluno ainda nÃ£o estÃ¡ matriculado nessa matÃ©ria

    Por que o uso do tipo Long (ou Integer) e nÃ£o String?
    No banco de dados:

    id SERIAL gera um nÃºmero inteiro automaticamente. Ã‰ uma boa prÃ¡tica usar nÃºmeros como identificadores porque,
    sÃ£o mais eficientes e rÃ¡pidos para o banco de dados consultar.

    Usar String como identificador tornaria buscas mais lentas e menos eficientes.

    O que significa .getSingleResult()? Este mÃ©todo diz para o Hibernate ORM: "execute a query e me dÃª um Ãºnico resultado".
    Se a query retornar mais de um resultado, o mÃ©todo lanÃ§arÃ¡ uma exceÃ§Ã£o. Se a query nÃ£o retornar nenhum resultado, o mÃ©todo lanÃ§arÃ¡ uma exceÃ§Ã£o.


    ðŸ”‘ Resumo completo dos conceitos importantes (para fixar):
            COUNT(*) â†’ conta quantos registros satisfazem uma condiÃ§Ã£o.
            ParÃ¢metros nomeados (:param) â†’ valores substituÃ­dos em tempo de execuÃ§Ã£o com seguranÃ§a.
            .getSingleResult() â†’ retorna exatamente um resultado Ãºnico.
            return count > 0; â†’ verifica se existe pelo menos um registro correspondente, indicando existÃªncia.
            NÃ£o Ã© ideal usar String como ID (normalmente usamos nÃºmeros sequenciais como Long ou Integer).
     */
    
    public boolean isAlunoMatriculado(Long alunoId, Long materiaId) {
        Long count = (Long) entityManager.createNativeQuery(
            "SELECT COUNT(1) FROM aluno_materia WHERE aluno_id = :aluno AND materia_id = :materia")
            .setParameter("aluno", alunoId)
            .setParameter("materia", materiaId)
            .getSingleResult();

            return count > 0;
    }
}
